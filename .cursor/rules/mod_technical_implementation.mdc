---
description: 
globs: *.cs,*.md
alwaysApply: false
---
# Mod 技术实现考量

该规则概述了"法术快速施法系统"Mod 在技术实现方面的主要考量点。参考 `[quickcast.md](mdc:quickcast.md)` 第 6 节 和 `[注意事项.md](mdc:注意事项.md)` 第 6、7 点。

## 1. 开发平台与框架

参考 `[quickcast.md](mdc:quickcast.md)` 第 6.1 节。

*   **Unity Mod Manager (UMM)**: 使用社区常用的 UMM 框架进行开发。
*   **HarmonyLib**: 需要 Harmony 库进行游戏代码注入（Patching），以便修改或扩展游戏原有功能，并绕过一部分 `private` 或 `protected` 的类、方法、属性、字段的访问限制。

## 2. 游戏代码分析

参考 `[quickcast.md](mdc:quickcast.md)` 第 6.1 节 和 `[注意事项.md](mdc:注意事项.md)` 第 6 点。

*   **反编译**: 需要使用如 dnSpy、ILSpy 或 JetBrains dotPeek 之类的 C# 反编译工具对游戏的核心程序集（主要是 `Assembly-CSharp.dll`）进行反编译。
*   **代码定位**: 对于任何与游戏系统交互的内容（例如，获取法术信息、模拟行动栏切换、触发施法动作等），**必须**查找反编译后的代码，以识别相关的类、确定需要调用的方法、需要访问/修改的属性以及可能需要订阅的事件。
*   **反编译代码路径**: 根据 `[注意事项.md](mdc:注意事项.md)` 第 6 点，游戏原有的 `Assembly-CSharp.dll` 文件反编译后的代码存储在 `C:\Users\ToisnaLey\Desktop\C\Assembly-CSharp` 路径的文件夹中。**在开发过程中应频繁参考此路径下的代码。**
*   **路径约定**: 优先使用相对路径进行游戏内资源或代码的查询，以避免因绝对路径导致的潜在错误。但对于上述指定的反编译代码存放路径，应使用其绝对路径进行访问。

## 3. 数据持久化

参考 `[quickcast.md](mdc:quickcast.md)` 第 6.3 节。

*   **需求**: 法术绑定信息（哪个环阶的哪个施法键绑定了哪个法术，以及用户自定义的按键映射等）需要被可靠地存储和加载。
*   **存储方案**: 
    *   与角色数据绑定，存储在游戏存档中。
    *   或存储在 Mod 自身的配置文件中（例如 UMM 提供的配置存储机制）。
    *   目标是确保在游戏存档加载、角色切换时能正确恢复绑定和配置设置。

## 4. 性能优化

参考 `[quickcast.md](mdc:quickcast.md)` 第 6.4 节。

*   **重要性**: Mod 的按键监听、UI 更新（尤其是动态主快捷栏的刷新）等逻辑需要高效实现，以避免在战斗中引入卡顿或性能下降。
*   **策略**: 
    *   尽量减少使用反射（Reflection）来获取或调用游戏代码，因为反射操作通常性能较低。优先使用 Harmony 创建的 `AccessTools` 或直接 Patch 的方式交互。
    *   避免在游戏的主更新循环（如 `Update()` 方法）中进行过于频繁或耗时的检查和操作。
    *   考虑使用事件驱动的逻辑来响应状态变化，而非轮询。

## 5. Mod 兼容性与冲突管理

参考 `[quickcast.md](mdc:quickcast.md)` 第 6.2 节。

*   **按键冲突**: 需要仔细规划默认按键，并提供充分的自定义选项，以避免与游戏默认按键或其他常用 Mod（如 Bubble Buffs, ToyBox 等）的快捷键冲突。
*   **系统交互**: Mod 对游戏系统的修改应尽可能模块化和独立，减少与其他 Mod 冲突的可能性。

## 6. 注意事项

参考 `[注意事项.md](mdc:注意事项.md)` 第 7 点。

*   **代码质量**: 务必注意代码编写的准确性，避免拼写错误等低级错误，确保代码在合入前经过检查。

