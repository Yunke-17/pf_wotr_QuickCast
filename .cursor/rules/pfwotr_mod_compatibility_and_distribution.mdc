---
description: 在Mod开发后期，准备发布、处理兼容性报告或更新Mod时。
globs: 
alwaysApply: false
---
# 《开拓者：正义之怒》Mod 兼容性与发布

本规则为 PFWoTR Mod 开发者提供有关确保 Mod 兼容性、处理常见问题以及准备 Mod 发布的指导方针。

## 1. Mod 兼容性

*   **游戏版本**: 
    *   PFWoTR 游戏本体会定期更新，这些更新可能引入破坏性更改，导致 Mod 失效。
    *   在 Mod 的 `Info.json` 中明确指定 Mod 兼容的最低（甚至最高）游戏版本号，并在发布说明中提及。
    *   关注游戏更新日志，及时测试并更新 Mod。
*   **其他 Mod**: 
    *   **Harmony Patch 冲突**: 多个 Mod Patch 同一个方法时可能发生冲突。
        *   使用 Harmony 的 `[HarmonyPriority(value)]` 来影响 Patch 执行顺序，但这并非万能。
        *   `[HarmonyAfter("other.mod.id")]` 和 `[HarmonyBefore("other.mod.id")]` 可以指定依赖关系。
        *   设计 Patch 时尽量减少对原方法逻辑的侵入性，或提供配置选项以改变行为。
    *   **共享数据修改**: 如果多个 Mod 修改相同的游戏数据或状态，可能导致意外行为。尽可能使 Mod 的修改独立，或与其他 Modder 沟通协调。
    *   **加载顺序**: UMM 加载 Mod 的顺序通常基于 Mod ID 的字母顺序，但依赖于此并不可靠。Mod 不应假设其他 Mod 已加载或未加载。
*   **蓝图 (Blueprints)**: 
    *   如果 Mod 修改了现有蓝图或依赖于特定蓝图ID，游戏更新或DLC可能改变这些蓝图，导致 Mod 错误。
    *   Mod 创建的新蓝图ID应具有唯一性，避免与其他 Mod 的ID冲突 (例如使用 Mod ID 作为前缀)。

## 2. Mod 设计最佳实践 (以提高兼容性)

*   **模块化**: 将 Mod 功能划分为独立的模块，便于管理和调试。
*   **最小权限原则**: Mod 的 Patch 和数据修改应仅限于实现其功能所必需的最小范围。
*   **可配置性**: 
    *   通过 UMM 设置界面提供尽可能多的配置选项，允许用户调整 Mod 行为，解决潜在的兼容性问题或个人偏好。
    *   例如：开关特定功能、调整数值、更改快捷键等。
*   **防御性编程**: 
    *   进行充分的空检查 (`null` checks) 和错误处理。
    *   预料到游戏数据可能处于非预期状态，并优雅地处理这些情况。
*   **避免硬编码**: 对于游戏内的ID（如蓝图ID、角色名等），如果可能，尝试通过查询或引用来获取，而不是硬编码字符串，因为它们可能随游戏更新或本地化而改变。

## 3. Mod 发布准备

*   **`Info.json` 文件**: 
    *   确保所有字段填写正确完整：`Id` (唯一且不应更改), `DisplayName`, `Author`, `Version`, `ManagerVersion` (UMM版本), `GameVersion` (兼容的游戏版本), `Requirements` (依赖的其他Mod ID), `AssemblyName` (DLL文件名) 等。
    *   版本号应遵循语义化版本规范 (例如 `1.0.0` Major.Minor.Patch)。
*   **打包**: 
    *   将 Mod 的 DLL、`Info.json` 以及任何必要的资源文件（如图片、配置文件）打包成一个 `.zip` 文件。
    *   目录结构应正确，以便 UMM 能够识别和加载 (通常 `Info.json` 和 DLL 在压缩包的根目录或 Mod ID 命名的子目录中)。
*   **README 文件**: 
    *   提供清晰的安装说明。
    *   详细描述 Mod 的功能。
    *   列出已知的兼容性问题或与其他 Mod 的冲突。
    *   提供配置选项的说明。
    *   包含联系方式或问题反馈渠道 (如 GitHub Issues, Discord 服务器)。
*   **测试**: 
    *   在发布前进行彻底测试，包括新游戏、加载旧存档、与常见大型 Mod (如 ToyBox, BubbleBuffs) 一同运行等场景。
    *   最好找一些测试者进行测试。
*   **源代码 (可选但推荐)**: 
    *   在 GitHub 等平台开源 Mod 代码，有助于社区协作、问题修复和透明度。

## 4. 发布平台

*   **Nexus Mods**: PFWoTR Mod 的主要发布和下载平台。
*   **GitHub**: 可以作为源代码托管和问题追踪的平台，并在 Nexus Mods 页面链接到 GitHub Release。

## 5. 更新和维护

*   定期检查用户反馈和 Bug 报告。
*   在游戏更新后及时测试并更新 Mod 以保持兼容性。
*   清晰地沟通 Mod 的更新内容和修复的问题。

遵循这些指南有助于提高 Mod 的质量、用户满意度，并减少维护负担。

