---
description: 在遇到Bug、需要诊断问题或想记录Mod运行状态时。
globs: 
alwaysApply: false
---
# 《开拓者：正义之怒》Mod 调试与日志记录

本规则提供了在为《开拓者：正义之怒》(PFWoTR) 开发 Mod 时进行有效调试和日志记录的技巧与方法。良好的调试和日志是确保 Mod 稳定性和快速定位问题的关键。

## 1. Unity Mod Manager (UMM) 日志

*   **主要日志源**: UMM 会捕获 Mod 中的 `System.Console.WriteLine()` 输出以及未处理的异常。
*   **访问**: UMM 界面提供了一个"日志"标签页，可以实时查看日志输出。
*   **日志文件**: UMM 通常会将日志保存到文件中，路径一般在：
    `%USERPROFILE%\AppData\LocalLow\Owlcat Games\Pathfinder Wrath of the Righteous\UnityModManager\ModInfo\YOUR_MOD_ID\Log.txt`
    (或者在UMM的Mods目录下对应的Mod文件夹内)
*   **UMM Logger**: 
    *   `UnityModManagerNet.UnityModManager.Logger.Log("My message");`
    *   `UnityModManagerNet.UnityModManager.Logger.Warning("My warning");`
    *   `UnityModManagerNet.UnityModManager.Logger.Error("My error");`
    *   这些方法会直接将带有时间戳和 Mod ID 的信息输出到 UMM 日志中，推荐使用。

## 2. Owlcat 日志系统

*   游戏本身使用 `Owlcat.Runtime.Core.Logging.LogChannel` 进行日志记录。
*   Mod 可以创建自己的日志频道：
    `private static LogChannel Logger = LogChannelFactory.GetOrCreate("MyModName");`
    `Logger.Log("My custom log message");`
*   这些日志通常会输出到游戏自身的日志文件中，其位置可能在：
    `%USERPROFILE%\AppData\LocalLow\Owlcat Games\Pathfinder Wrath of the Righteous\GameLog.txt` 或类似路径。
*   使用游戏内置日志系统的好处是可以与其他游戏日志信息关联查看。

## 3. 使用 IDE 进行调试

*   **附加到进程**: 大部分C# IDE (如 Visual Studio, JetBrains Rider) 支持将调试器附加到正在运行的 Unity 进程 (`Wrath.exe`)。
*   **步骤**: 
    1.  在 Mod 代码中设置断点。
    2.  以 Debug 模式编译 Mod。
    3.  启动游戏并通过 UMM 加载 Mod。
    4.  在 IDE 中选择 "附加到进程" (Attach to Process)，找到 `Wrath.exe` (确保选择正确的托管代码类型，如 'Managed (.NET 4.x)' 或 Unity Debugger)。
    5.  触发 Mod 中设置了断点的代码路径。
*   **好处**: 允许单步执行代码、查看变量值、检查调用堆栈等，是定位复杂问题的强大工具。
*   **PDB 文件**: 确保 Debug 构建时生成了 `.pdb` (Program Database) 文件，并与 Mod 的 DLL 一同放置，调试器需要它们来映射到源代码。

## 4. 游戏内调试工具 (若有)

*   **ToyBox Mod**: 像 ToyBox 这样的多功能 Mod 通常包含一些开发者工具，例如查看游戏内部状态、变量、蓝图信息等，可以辅助调试。
*   自行开发的 Mod 也可以考虑在 UMM 的设置界面中添加一些调试用的按钮或信息显示功能。

## 5. 调试技巧

*   **分段调试**: 将复杂逻辑拆分成小块，逐步验证每一部分的正确性。
*   **条件断点**: 仅在特定条件满足时触发断点，避免不必要的暂停。
*   **日志级别**: 使用不同的日志级别（Info, Warning, Error, Debug）来区分信息的重要性。在发布 Mod 时可以考虑关闭或减少 Debug 级别日志的输出。
*   **异常处理**: 
    *   使用 `try-catch` 块捕获并记录潜在的异常，防止 Mod 崩溃并提供错误信息。
    *   `catch (Exception e) { UMM.Logger.Error(e.ToString()); }`
*   **测试不同场景**: 在游戏的不同阶段（主菜单、游戏加载、战斗中、地图上、不同角色）测试 Mod 功能，确保其在各种情况下的稳定性。
*   **干净的测试环境**: 调试时尽量减少其他 Mod 的干扰，除非是在测试兼容性问题。

## 6. 注意事项

*   **避免在发布版本中过多日志**: 大量日志输出会影响性能，并可能淹没重要信息。在 Mod 发布前，审阅并清理不必要的日志语句。
*   **敏感信息**: 不要在日志中记录用户密码、密钥等敏感信息。
*   **日志文件大小**: 如果日志非常频繁，注意日志文件可能变得过大。

有效的调试和日志策略将极大提升 Mod 开发效率和最终产品的质量。

