---
description: 
globs: *.md,*.cs
alwaysApply: false
---
# 《开拓者：正义之怒》Mod 开发环境配置

本规则概述了进行《开拓者：正义之怒》(Pathfinder: Wrath of the Righteous - PFWoTR) Mod 开发所需的标准环境、工具和关键文件/目录结构信息。

## 1. 核心工具

*   **Unity Mod Manager (UMM)**: 
    *   绝大多数PFWoTR Mod依赖的主要Mod加载和管理工具。
    *   Mod项目通常会构建为UMM兼容的压缩包（通常是 .zip 文件）。
    *   UMM负责将Mod注入游戏，并提供Mod设置界面、日志查看等功能。
*   **C# IDE**: 
    *   推荐使用 Visual Studio 或 JetBrains Rider 进行C#代码编写和项目管理。
    *   确保IDE配置了正确的 .NET Framework 版本（通常与游戏使用的Unity版本兼容，早期可能是 .NET Framework 4.x，较新的Unity版本可能支持更高版本的 .NET Standard 或 .NET Core/5+ 等效功能，需查证游戏具体情况）。
*   **反编译工具**: 
    *   **dnSpy (dnSpyEx)**, **ILSpy**, 或 **JetBrains dotPeek**: 用于反编译游戏的核心程序集（主要是 `Assembly-CSharp.dll` 和其他相关DLL），以理解游戏内部逻辑、查找可Patch的方法、类和字段。
    *   这是理解未公开API和游戏行为的关键步骤。
*   **HarmonyLib**: 
    *   强大的运行时代码修改库，几乎所有PFWoTR Mod都使用它来注入和修改游戏代码（Patching）。
    *   通常作为NuGet包添加到Mod项目中，或直接引用其DLL。

## 2. 重要文件和目录

*   **游戏安装目录**: 
    *   包含游戏主程序 (`Wrath.exe`) 和所有游戏资源。
    *   例如: `C:\Program Files (x86)\Steam\steamapps\common\Pathfinder Second Adventure` (路径可能因平台和用户设置而异)。
*   **游戏数据目录 (`Wrath_Data`)**: 
    *   位于游戏安装目录下，包含关键的游戏数据和程序集。
    *   `Wrath_Data\Managed\`: 这个子目录至关重要，包含了所有托管的 .NET 程序集 (DLLs)，例如：
        *   `Assembly-CSharp.dll`: 游戏的主要逻辑代码，是反编译和Patch的主要目标。
        *   `UnityEngine.*.dll`: Unity引擎的核心库。
        *   `Owlcat.Runtime.*.dll`: 猫头鹰工作室特有的运行时库。
        *   其他第三方库和游戏特定逻辑库。
*   **Unity Mod Manager 安装目录**: 
    *   通常 UMM 会在游戏根目录或用户指定的目录创建其自身的文件夹（例如 `UnityModManager`）。
    *   `Mods\`: UMM 管理的Mod会存放在此（或其子目录，如 `USER_PROFILE\AppData\LocalLow\Owlcat Games\Pathfinder Wrath of the Righteous\UnityModManager\`）。了解Mod的部署位置有助于调试。
*   **Mod项目结构 (典型)**:
    *   `.csproj` 文件: C# 项目文件。
    *   `Info.json`: UMM Mod的元数据文件，包含Mod ID, 名称, 作者, 版本等信息，是UMM识别Mod的入口。
    *   源代码文件 (`.cs`): Mod的C#逻辑代码。
    *   `HarmonyPatches/` (可选目录): 存放Harmony Patch类的文件。
    *   `assets/` (可选目录): 存放Mod可能需要的自定义资源（图片、配置文件等）。

## 3. 项目设置与依赖

*   **引用游戏程序集**: Mod项目需要引用游戏安装目录 `Wrath_Data\Managed\` 下的相关DLL，特别是 `Assembly-CSharp.dll` 和必要的 `UnityEngine.*.dll`，以便访问游戏类和方法。
*   **HarmonyLib 集成**: 将 HarmonyLib 添加到项目中，通常通过NuGet包管理器或直接引用DLL。
*   **.NET Target Framework**: 确认并设置项目以匹配游戏所使用的.NET版本。

## 4. 版本控制
*   强烈建议使用版本控制系统（如 Git）来管理Mod的源代码，便于追踪修改、协作和备份。

熟悉这些环境要素是顺利进行PFWoTR Mod开发的基础。

